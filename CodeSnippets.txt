
1. ------------ Basic Routing, first Controller Action -------------------------
        private IGLFeedServices _glFeedService;

        public DailyGemsController()
        {
            _glFeedService = new GLFeedServices();
        }

        public DailyGemsController(IGLFeedServices glFeedService)
        {
            _glFeedService = glFeedService;
        }

        // GET: DailyGems
        [HttpGet]
        [Route("api/dailygems")]
        public List<DailyGem> GetDailyGems()
        {
            return _glFeedService.GetDailyGems();
        }

2. -------------- Daily Gems View Model ---------------------------

    public class DailyGemVM
    {
        public int Id { get; set; }

        [StringLength(250)]
        public string Guid { get; set; }

        [StringLength(500)]
        public string Title { get; set; }

        [StringLength(500)]
        public string Link { get; set; }

        public string Quote { get; set; }

        [StringLength(250)]
        public string Author { get; set; }

        [StringLength(1000)]
        public string LdsOrgUrl { get; set; }

        public DateTime? PubDate { get; set; }

        [StringLength(10)]
        public string LangCode { get; set; }

        public DateTime? ModifiedDate { get; set; }
    }

3. --------------  Camel Case Resolver -----------------------------

            config.Formatters.JsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();

3a. --------------   Include Error Detail Policy ----------------------

            config.IncludeErrorDetailPolicy = IncludeErrorDetailPolicy.Always;

4. -------------- ADD CSVMediaTypeFormatter to App_Start WebApiConfig.cs ---------------

             config.Formatters.Add(new CSVMediaTypeFormatter());

5. -------------- ADD BsonMediaTypeFormatter to App_Start WebApiConfig.cs --------------

			config.Formatters.Add(new BsonMediaTypeFormatter());

6. -------------- Add a Post Method ----------------------

        [HttpPost]
        [Route("api/dailygems")]
        public DailyGem AddDailyGem(DailyGem dailyGem)
        {
            return _glFeedService.AddDailyGem(dailyGem);
        }

7. --------------- Sample POST DATA put into swagger ----------------------

{
  "Title": "Love one another",
  "Link": "/general-conference",
  "RawDescription": "",
  "Quote": "We should learn to love one another in spite of our technologies",
  "Author": "Tony Spencer",
  "LdsOrgUrl": "https://lds.org/general-conference",
  "Topic": "Love",
  "SourceRss": "NEW",
  "PubDate": "2015-10-12T16:42:30.508Z",
  "LangCode": "ENG",
  "CreatedDate": "2015-10-12T16:42:30.508Z",
  "ModifiedDate": "2015-10-12T16:42:30.508Z"
}


8. ----------------  Basic AUTH Attribute ----------------------------------

    public class BasicAuthAttribute : AuthorizationFilterAttribute
    {
        public override void OnAuthorization(HttpActionContext actionContext)
        {
            if (Thread.CurrentPrincipal.Identity.IsAuthenticated) { return; }

            var authHeader = actionContext.Request.Headers.Authorization;

            if (authHeader != null)
            {
                if (authHeader.Scheme.Equals("basic", StringComparison.OrdinalIgnoreCase) &&
                    !string.IsNullOrWhiteSpace(authHeader.Parameter))
                {
                    var rawCredentials = authHeader.Parameter;
                    var encoding = Encoding.GetEncoding("iso-8859-1");
                    var credentials = encoding.GetString(Convert.FromBase64String(rawCredentials));
                    var split = credentials.Split(':');
                    var username = split[0];
                    var password = split[1];

                    if (username == "Sort2015" && password == "ItsM@g!c") return;
                    // Implement some security to test for valid username and password pair.


                    // If you want to add the user to the CurrentPrincipal, do this below:

                    // if (MyValidateUserAuth(username, password)) { 
                    //  var principal = new GenericPrincipal(new GenericIdentity(username), null);
                    //  Thread.CurrentPrincipal = principal;
                    //  return; 
                    // }
                }
            }

            HandleUnauthorized(actionContext);
            base.OnAuthorization(actionContext);
        }

        private void HandleUnauthorized(HttpActionContext actionContext)
        {
            var req = actionContext.Request;
            actionContext.Response = req.CreateResponse(HttpStatusCode.Unauthorized);
            actionContext.Response.Headers.Add("WWW-Authenticate", "Basic Scheme='' location=''");
        }
    }
